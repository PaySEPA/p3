/*!
 * Payment Support
 *
 * @requires jQuery v1.6+ (http://jquery.com/)
 * @requires jQuery Tools v1.2.6+ (+ history) (http://flowplayer.org/tools/)
 *
 * @author David I. Lehn <dlehn@digitalbazaar.com>
 * @author Dave Longley
 * @author Manu Sporny
 */
(function($) {

$(document).ready(function() {  
  // setup template populator for accounts
  website.util.setupTemplate({
    target: $('#source-account')[0],
    method: 'GET',
    url: data.identity + '/accounts',
    success: updateAccounts,
    error: function(ex) {
      // FIXME: better error handling
      console.log('ERROR', ex);
    }
  });
  
  // setup template populator for the quote
  website.util.setupTemplate({
    target: $('#quote')[0],
    method: 'POST',
    url: '/transactions?quote=true',
    data: function() {
      var rval = {
        '@context': 'http://purl.org/payswarm/v1',
        'ps:listing': data['ps:listing'],
        'ps:listingHash': data['ps:listingHash'],
        'com:source': $('#account-selector option:selected').val()
      };
      if('com:referenceId' in data && data['com:referenceId'] !== null) {
        rval['com:referenceId'] = data['com:referenceId'];
      }
      if('sec:nonce' in data) {
        rval['sec:nonce'] = data['sec:nonce'];
      }
       
      return rval;
    },
    success: updateQuote,
    error: function(ex) {
      if(ex.type === 'payswarm.website.DuplicatePurchase') {
        $("#duplicate-payment-ui").show();
      }
      else {
        // FIXME: better error handling
        console.log('ERROR', ex);
      }
    }
  });

  // setup template populator for the purchase
  website.util.setupTemplate({
    target: $('#purchase')[0],
    method: 'POST',
    url: '/transactions',
    data: function() {
      var rval = {
        '@context': 'http://purl.org/payswarm/v1',
        '@type': 'ps:PurchaseRequest',
        'ps:transactionId': data['contract']['@id']
      };
       
      return rval;
    },
    success: finalizePurchase,
    error: function(ex) {
      // FIXME: better error handling
      console.log('ERROR', ex);
    }
  });
<<<<<<< HEAD

  // setup template populator for the purchase
  website.util.setupTemplate({
    target: $('#purchase')[0],
    method: 'POST',
    url: '/transactions',
    data: function() {
       var rval = {
         '@context': 'http://purl.org/payswarm/v1',
         '@type': 'ps:PurchaseRequest',
         'ps:transactionId': data['contract']['@id']
       };

       return rval;
    },
    success: completePurchase,
    error: function(ex) {
      // FIXME: better error handling
      console.log('ERROR', ex);
    }
  });

=======
  
>>>>>>> 099d1caf90e657c3bda62381c444d93edd1aeae2
  // toggle cart details
  $(document).on('click', '.cart-details-toggle', function() {
    console.log("X");
    $('.cart-details').toggle();
    return false;
  });

  // click handler for purchase button
  $(document).on('click', '#purchase', function() {
     $('#purchase')[0].populate();
  });

  // get a new quote when changing the account
  $('#account-selector').change(function() {
    // update quote-request form w/selected account
    $('#quote')[0].populate();
  });
  
  // setup the purchase button action
  $(document).on('click', '#purchase', function () {
    $('#purchase')[0].populate();
  });
  
  // FIXME: populate all of the financial accounts for the current identity
  $('#source-account')[0].populate();
  
  /*
  // FIXME: old below
  
  
   // setup defaults (needed on reload)
   $('.purchase-setup input').attr('disabled', false);
   $('#budget-toggle').removeAttr('checked');
   $('.budget-setup').hide();
   $('.cart-details').hide();
   
   // show account selection
   $('#payment-account').click(function() {
      $('#payment-account').hide();
      $('#payment-selection').show();
   });

   // assign the click handler for the purchase button
   $('#purchase').click(function() {
      
      // hide the purchase button
      $('#purchase').hide();
      
      // check to see if a credit card deposit was requested
      if($('#creditcard-radio').is(':checked'))
      {
         performCreditCardDeposit();
      }
      else
      {
         performPurchase();
      }
   });

   // toggle budget screen
   $('#budget-toggle').change(function() {
      $('.budget-setup').toggle();
   });
   
   // copy selected account id to budget add form
   //$('#payment-selection select[name="account"]').change(function() {
   //   $('#budget-account').attr('value', $(this).val());
   //});
   */
});

function updateAccounts(accounts) {
  console.log("Accounts:", accounts);

  data['accounts'] = accounts;

  // NOTE: Called on init and after every account selection change. 
  // update quote
  $('#source-account').replaceWith($('#source-account-tmpl').tmpl({
     tmpl: tmpl,
     accounts: accounts
  }));
  
  $('#quote')[0].populate();
}

function updateQuote(contract) {
  console.log("Contract:", contract);

  data['contract'] = contract;

  // NOTE: Called on init and after every account selection change. 
  // update quote
  $('#quote').replaceWith($('#quote-tmpl').tmpl({
     tmpl: tmpl,
     contract: contract
  }));
 
  // ensure account balance is >= contract price
  var account = $('#account-selector option:selected');
  var balance = parseFloat(account.data('balance'));
  var price = parseFloat(contract['com:amount']);
  if(balance < price) {
    // insufficient funds, show deposit selection
    console.warn('FIXME: insufficient funds, show deposit selection');
  } else {
    enablePurchase();
  }
 
  // show the payment UI
  $('#payment-ui').show();
  
  // FIXME: does the budget UI need to be updated?
  // $('#budget-account').attr('value', $(this).val());
  
  // FIXME: enable UI
  console.warn('FIXME: enable UI after showing quote');
}

function showAddressChoice(response) {
  $('#address').replaceWith($('#address-choice').tmpl(response));
  // FIXME: address-choice should have hidden forms for validated and
  // unvalidated addresses
  
  // set up address submission forms
  website.setupForm({
    form: $('#address-unvalidated'),
    success: enableDeposit
  });
  website.setupForm({
    form: $('#address-validated'),
    success: enableDeposit
  });
  
  $('#address-radio').click(function(event) {
    // FIXME: disable interface
    console.warn('FIXME: disable UI on address click')
    
    // submit address based on what was clicked
    $('#address-' + event.target.defaultValue).submit();
  });
  
  // attach "go back" handler
  //$('#address-back').click(function...);
}

function enableDeposit(response) {
  console.warn('FIXME: implement enable deposit');
  // FIXME: if deposit required, enable deposit selection
  // FIXME: if CC is picked, show CC UI, etc.
  
  // FIXME: if no deposit required, enable budget UI, if no budget UI,
  // enable purchase button
}

function enableBudget() {
  // FIXME: show budget UI
  console.warn('FIXME: show budget UI');
}

function enablePurchase() {
  // FIXME: submit transaction ID to /transactions
  $('#purchase').removeAttr('disabled');
  console.warn('FIXME: enable purchase, submit transaction ID to /transactions');
}

<<<<<<< HEAD
function completePurchase(encryptedMessage) {
  console.log("EncryptedReceipt", encryptedMessage);
  $('#complete').submit();
=======
function finalizePurchase(receipt) {
  console.log("RECEIPT", receipt);
>>>>>>> 099d1caf90e657c3bda62381c444d93edd1aeae2
}

/*
// FIXME: OLD
function performCreditCardDeposit() {
   // build purchase request
   // FIXME: Need to include the right data
   var request = {
      '@type': ['ps:Transaction', 'ps:Deposit'],
      'foaf:name': 'Digital Bazaar',
      'vcard:adr':
      {
         '@type': 'vcard:Address',
         'vcard:country-name': 'US',
         'vcard:locality': 'Blacksburg',
         'vcard:postal-code': '24060',
         'vcard:region': 'VA',
         'vcard:street-address': '1700 Kraft Drive, Suite 2408'
      },
      'com:transfer': 
      {
         'com:destination': $('select[name="account"]').val()
      },
      'com:amount': $('#creditcard-deposit-amount').val(),
      'com:currency': 'USD',
      'com:gateway': 'Test',
      'com:payee': 
      [{
         '@type': 'com:Payee',
         'com:rate': $('#creditcard-deposit-amount').val(),
         'com:rateType': 'com:FlatAmount',
         'com:currency': 'USD',
         'com:destination': $('select[name="account"]').val(),
         'rdfs:comment': 'Deposit from purchase'
      }],
      'com:source': 
      {
         '@type': 'ccard:CreditCard',
         'ccard:address':
         {
            '@type': 'vcard:Address',
            'vcard:country-name': 'US',
            'vcard:locality': 'Blacksburg',
            'vcard:postal-code': '24060',
            'vcard:region': 'VA',
            'vcard:street-address': '1700 Kraft Drive, Suite 2408'
         },
         'ccard:brand': 'ccard:Visa',
         'ccard:cvm': '1111',
         'ccard:expMonth': '01',
         'ccard:expYear': '11',
         'ccard:name': 'Digital Bazaar',
         'ccard:number': '4111111111111111'
      }
   };

   // attempt to submit purchase request
   $.ajax({
      url: '/financial/deposit/confirm',
      type: 'POST',
      contentType: 'application/json',
      dataType: 'json',
      data: JSON.stringify(request),
      success: function(data, textStatus, jqXHR)
      {
         // FIXME: Update UI to specify deposit success?
         console.log("DEPOSIT CONFIRM RESULT:", data);
         finalizeCreditCardDeposit(data['deposit']);
      },
      error: function(jqXHR, textStatus, errorThrown)
      {
         // FIXME: Need much better feedback than this
         $('#purchase-feedback').html('<div class="message error">' + jqXHR.statusText + '</div>')
         console.log('DEPOSIT CONFIRM ERROR', jqXHR);
      }
   });
}

function finalizeCreditCardDeposit(deposit) {
   // FIXME: This seems hackish - service should pick the address on the card.
   // add the required fields to the deposit object
   deposit['foaf:name'] = 'Manu Sporny';
   deposit['vcard:adr'] = 
   [{
      '@type': 'vcard:Address',
      'vcard:country-name': 'US',
      'vcard:locality': 'Blacksburg',
      'vcard:postal-code': '24060',
      'vcard:region': 'VA',
      'vcard:street-address': '1700 Kraft Drive, Suite 2408'
   },
   {
      '@type': 'vcard:Address',
      'vcard:country-name': 'US',
      'vcard:locality': 'Blacksburg',
      'vcard:postal-code': '24060',
      'vcard:region': 'VA',
      'vcard:street-address': '1700 Kraft Drive, Suite 2408'      
   }];
   deposit['psa:selectedAddress'] = 'original';
   
   // FIXME: The validator for the call is a little buggy and should be fixed
   // convert all rateContext strings into arrays
   for(i in deposit['com:payee'])
   {
      if('com:rateContext' in deposit['com:payee'][i])
      {
         var rateContext = deposit['com:payee'][i]['com:rateContext'];
         if(typeof(rateContext) == "string")
         {
            deposit['com:payee'][i]['com:rateContext'] = [rateContext];
         }
      }
   }
   
   // attempt to submit purchase request
   $.ajax({
      url: '/financial/deposit',
      type: 'POST',
      contentType: 'application/json',
      dataType: 'json',
      data: JSON.stringify(deposit),
      success: function(data, textStatus, jqXHR)
      {
         // FIXME: temporary debugging info, remove before launch
         console.log("DEPOSIT RESULT:", data);
         performPurchase();
      },
      error: function(jqXHR, textStatus, errorThrown)
      {
         // FIXME: Need better feedback than this
         $('#purchase-feedback').html('<div class="message error">' + jqXHR.statusText + '</div>')
         console.log('DEPOSIT ERROR', jqXHR);
      }
   });
}

function performPurchase() {
   // build purchase request
   var request = {
       // FIXME: send TXN ID of finalized contract instead, service should
       // be able to handle both, do look up in contract cache if a TXN ID
       // is provided
       
       
      // listing being purchased
      'ps:listing': payRequest.listing,
      'ps:listingHash': payRequest.listingHash,
      
      // buyer identity
      // FIXME: The value should be read from elsewhere on the page
      'ps:identity':
         $('select[name="account"] option[selected="selected"]')
         .attr("title"),
         
      // buyer account
      'com:account': $('select[name="account"]').val(),
      
      // security details
      'sec:nonce': payRequest.responseNonce
      
      // payment details
      // FIXME: type specific payment details
      // ...
   };
   
   // update request with budget details if requested
   if($('#budget-toggle').is(':checked'))
   {
      var budget = $('select[name="budget"]').val();
      if(budget == '')
      {
         // empty budget id adds a new budget
         var form = $('#budget');
         request['psa:budget'] = {
            'rdfs:label': $('input[name="rdfs:label"]', form).val(),
            'com:amount': $('input[name="com:amount"]', form).val(),
            'psa:maxPerUse': $('input[name="psa:maxPerUse"]', form).val(),
            'psa:refresh': $('select[name="psa:refresh"]', form).val(),
            'psa:expires': $('select[name="psa:expires"]', form).val(),
         };
      }
      else
      {
         // use selected budget id
         request.budget = budget;
      }
   }
   
   // attempt to submit purchase request
   $.ajax({
      url: '/contracts',
      type: 'POST',
      contentType: 'application/json',
      dataType: 'json',
      data: JSON.stringify(request),
      success: function(data, textStatus, jqXHR)
      {
         // disable setup fields
         $('.purchase-setup input').attr('disabled', true);
         // show the purchase processed UI
         $('.purchase-completed').show();

         // if receipt requested, go to receipt page, else auto redir to target
         $('a[href="#receipt"]', '#pay-tabs').removeClass('disabled');
         $('#receipt-feedback').empty();
         $('input[name="encrypted-message"]')
            .attr('value', JSON.stringify(data.encryptedMessage));
         console.log("COMPLETE", data);
         var receipt = $('#show-receipt').is(':checked');
         if(!receipt)
         {
            // auto submit the completion form
            $('#complete').submit();
         }
      },
      error: function(jqXHR, textStatus, errorThrown)
      {
         $('#purchase-feedback').html('<div class="message error">' + jqXHR.statusText + '</div>')
         console.log('CONFIRM ERROR', arguments);
         // show and/or jump to first pane with errors
      }
   });
}
*/   
})(jQuery);
